.\" Manpage for pickle
.\" Contact howe.r.j.89@gmail.com to correct errors or typos.
.de Xs
.in +.5i
.ll -.5i
..
.de Xe
.in
.ll
..
.TH pickle 1 "20 Jun 2019" "1.0.0" "pickle man page"
.SH NAME
pickle \- An interpreter for a TCL like language.
.SH SYNOPSIS
pickle [-htaAs] file*
.SH DESCRIPTION
.B pickle
is an interpreter for a TCL like language, which was derived from a small
program called 'picol', by Antirez. The language is not exactly like TCL but
it is close enough. The goals of the project are to provide a simple and
small (not efficient) interpreter that can embedded pretty much anywhere to
be used as a command line interpreter, for example it could be used on an
embedded system where you may want to issue a few quick commands to the device
over a UART interface.

For a more complete description of the language, please view the 
.I readme.md
file which you can find online at:
.br
.B <https://github.com/howerj/pickle/blob/master/readme.md>
.br
This contains a much fuller description of the project.

Things to bear in mind about the language:

.br
* Everything in the language is a string.
.br
* All things are commands, like in sh(1), they take the form 'command arg1, arg2, ...'
.br
* There is very little syntax.

The syntax includes:

.nf
\&	string  called if first string, argument if not
\&	{ }     quote, used to prevent evaluation
\&	[ ]     command substitution
\&	" "     string
\&	$var    variable lookup
\&	\\c      escape a character
\&	#       comment
.fi

Some example commands/programs, one per line:

.nf
\&	puts "Hello, World!"
\&
\&	set a 2; puts $a; puts "a is: $a";
\&
\&	if {< $a 3} { puts "a < three" } else { puts "a >= three" }
\&
\&	set a -1; while {< $a 3} { set a [+ $a 1]; puts $a; }
\&
\&	proc square {x} { * $x $x }; puts "$a squared is [square $a]";
\&
\&	set line [gets]; puts "you typed $line";
.fi

.SH OPTIONS

.TP
.B -
Stop processing command line arguments

.TP
.B -h
Display a help message and exit.

.TP
.B -t
Run built in self tests and exit (return code 0 is success).

.TP 
.B -a
Use custom block allocator, for testing purposes. The interpreter does not have
to use the standard library allocation functions malloc(3) and free(3), but
instead can use an externally provided allocator. This is to aid in porting the
system to a non-hosted environment, running on the bare metal.

.TP 
.B -A
Enable debugging of the custom allocator, implies '-a'.

.TP 
.B -s
Suppress prompt printing. By default a prompt is printed out, this can be
disabled.

.TP
.B file
A pickle script file to process, multiple files can be given and they will be
processed one after the other.

.SH EXAMPLES

.B
	./pickle file.tcl

This will run the pickle interpreter on a TCL script called
.I file.tcl

.SH C API

The C API is small and regular. All of the functions exported return the same
error codes and implementing an interpreter loop is trivial.

The language can be extended with new functions written in C, each function
accepts an integer length, and an array of pointers to ASCIIZ strings - much 
like the 'main' function in C.

User defined commands can be registered with the 'pickle_register_command' 
function. With in the user defined callbacks the 'pickle_set_result' family of 
functions can be used. The callbacks passed to 'pickle_register_command' look
like this:

typedef int (*pickle_command_func_t)(pickle_t *i, int argc, char **argv, void *privdata);

The callbacks accept a pointer to an instance of the pickle interpreter, and
a list of strings (in 'argc' and 'argv'). Arbitrary data may be passed to the
custom callback when the command is registered.

The function returns one of the following status codes:

.Xs
.nf
\&PICKLE_ERROR    = -1 (Throw an error until caught)
\&PICKLE_OK       =  0 (Signal success, continue on execution)
\&PICKLE_RETURN   =  1 (Return out of a function)
\&PICKLE_BREAK    =  2 (Break out of a while loop)
\&PICKLE_CONTINUE =  3 (Immediately proceed to next iteration of while loop)
.fi
.Xe

These error codes can affect the flow control within the interpreter. The
actual return value of the callback is set with 'pickle_set_result' functions.

Some functions are define purely for convenience and are not strictly 
necessary, such as 'pickle_set_result_error' and 'pickle_set_result_error_arity',
these return 'PICKLE_ERROR' always, the latter function deals specifically with
arity errors within functions, formatting the return buffer an number of
arguments related error message. Likewise, the functions that set the return
value to a number and not a string are wrappers around calls to 'snprintf'
and 'pickle_set_result_string'. The 'get' and 'set' functions return 'PICKLE_OK'
on success, and 'PICKLE_ERROR' on failure. A 'get' fails if the variable does
not exists, a 'set' on a variable that does not exist creates that variable
(which may failure, returning 'PICKLE_ERROR').

Variables can be set either within or outside of the user defined callbacks
with the 'pickle_set_variable' family of functions.

The pickle library does not come with many built in functions, and comes with
no Input/Output functions (even those available in the C standard library) to
make porting to non-hosted environments easier. The example test driver program
does add functions available in the standard library.

The following is the source code for a simple interpreter loop that reads a
line and then evaluates it:

.Xs
.nf
\&#include "pickle.h"
\&#include <stdio.h>
\&#include <string.h>
\&
\&int main(void) {
\&	pickle_t *p = NULL;
\&	if (pickle_new(&p, NULL) < 0)
\&		return -1;
\&	const char *prompt = "> ";
\&	fputs(prompt, stdout);
\&	fflush(stdout);
\&	for (char buf[80] = { 0 }; fgets(buf, sizeof buf, stdin); memset(buf, 0, sizeof buf)) {
\&		const char *r = NULL;
\&		const int er = pickle_eval(p, buf);
\&		pickle_get_result_string(p, &r);
\&		fprintf(stdout, "[%d]: %s\\n%s", er, r, prompt);
\&		fflush(stdout);
\&	}
\&	return pickle_delete(p);
\&}
.fi
.Xe

Also present is a custom prompt.

It should be obvious that the interface presented is not efficient for many
uses, treating everything as a string has a cost. It is however simple and
sufficient for many tasks.

While API presented in 'pickle.h' is small there are a few areas of
complication. They are: The memory allocation API, registering a command, the
getopt function and the unit tests. The most involved is the memory allocation
API and there is not too much to it, you do not even need to use it and can
pass a NULL to 'pickle_new' if for the allocator argument if you want to use
the built in malloc/realloc/free based allocator (provided the library was
built with support for it).

It may not be obvious from the API how to go about designing functions to
integrate with the interpreter. The C API is deliberately kept as simple as
possible, more could be exported but there is a trade-off in doing so; it
places more of a burden on backwards compatibility, limits the development
of the library internals and makes the library more difficult to use. It is
always possible to hack your own personal copy of the library to suite your
purpose, the library is small enough that this should be possible.

The Pickle interpreter has no way of registering different types with it, the
string is king. As such, it is not immediately clear what the best way of
adding functionality that requires manipulating non-string data (such as
file handles or pointers to binary blobs) is. There are several ways of doing
this:

.nf
\& 1. Convert the pointer to a string and add functions which deal with this string.
\& 2. Put data into the private data field
\& 3. Create a function which registers another function that contains private data.
.fi

Option '1' may seem natural, but it is much more error prone. It is possible
to pass the wrong string around and cause the program to crash. Option '2' is
limiting, the C portion of the program is entirely in control of what resources
get added, and only one handle to a resource can be controlled. Option '2' is
a good option for certain cases.

Option '3' is the most general and allows an arbitrary resource to be managed
by the interpreter. The idea is to create a function that acquires the resource
to be managed and registers a new function in the pickle global function 
namespace with the resource in the private data field of the newly registered
function. The newly created function, a limited form of a closure, can then
perform operations on the handle. It can also cleanup the resource by release
the object in its private data field, and then deleting itself with the
 'pickle_rename_command' function. An example of this is the 'fopen' command,
it returns a closure which contains a file handle.

An example of using the 'fopen' command and the returned function from within
the pickle interpeter is:

.Xs
.nf
\& set fh [fopen file.txt rb]
\& set line [$fh -gets]
\& $fh -close
.fi
.Xe

And an example of how this might be implemented in C is:

.Xs
.nf
\&
\& int pickleCommandFile(pickle_t *i, int argc, char **argv, void *pd) {
\& 	FILE *fh = (FILE*)pd;
\& 	if (!strcmp(argv[1], "-close")) { /* delete self */
\&		fclose(fh);                                /* free handle */
\&		return pickle_rename_command(argv[0], ""); /* delete self */
\&	}
\&      if (!strcmp(argv[1], "-gets")) {
\& 		char buf[512];
\& 		fgets(buf, sizeof buf, fh);
\&		return pickle_set_result_string(i, buf);
\& 	}
\&	return pickle_set_result_error(i, "invalid option");
\& }
\&
\& int pickleCommandFopen(pickle_t *i, int argc, char **argv, void *pd) {
\& 	char name[64];
\&	FILE *fh = fopen(argv[1], argv[2]);
\&	sprintf(name, "%p", fh); /* unique name */
\& 	pickle_register_command(i, name, pickleCommandFile, fh);
\& 	return pickle_set_result_string(i, name);
\& }
.fi
.Xe

The code illustrates the point, but lacks the assertions, error checking,
and functionality of the real 'fopen' command. The 'pickleCommandFopen' should
be registered with 'pickle_register_command', the 'pickleCommandFile' is not
as 'pickleCommandFopen' does the registering when needed.

.SH EXIT STATUS

This command returns zero on success and non zero on failure, although any
scripts executed may chose to return other values.

.SH SEE ALSO

For more information, see
.B <https://github.com/howerj/pickle>

.SH LIMITATIONS

For the sake of simplicity of the implementation the system has some
limitations. The defaults as of writing this document are:

.nf
\& * Recursion Depth - 128
\& * Number of arguments to command/function - 128
\& * Maximum string length - 512 bytes
\& * Maximum command length (length of line) - 1024 bytes
\& * Maximum size of file - 2GiB
.fi

Some of these limitations should be removed in later releases.

.SH BUGS
For any bugs, contact the author.

.SH AUTHOR
Richard James Howe (howe.r.j.89@gmail.com)

.SH COPYRIGHT
BSD license, See 
.B <https://github.com/howerj/pickle/blob/master/LICENSE>
or pickle.c for more information.

Copyright (c) 2018-2019, Richard James Howe <howe.r.j.89@gmail.com>
.br
Copyright (c) 2007-2016, Salvatore Sanfilippo <antirez at gmail dot com>

