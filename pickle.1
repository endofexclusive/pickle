.\" Manpage for pickle
.\" Contact howe.r.j.89@gmail.com to correct errors or typos.
.TH pickle 1 "6 Aug 2019" "1.0.0" "pickle man page"
.SH NAME
pickle \- An interpreter for a TCL like language.
.SH SYNOPSIS
pickle [-htaAs] file*
.SH DESCRIPTION
.B pickle
is an interpreter for a TCL like language, which was derived from a small
program called 'picol', by Antirez. The language is not exactly like TCL but
it is close enough. The goals of the project are to provide a simple and
small (not efficient) interpreter that can embedded pretty much anywhere to
be used as a command line interpreter, for example it could be used in an
embedded system where you may want to issue a few quick commands to the device
over a UART interface.

For a more complete description of the language, and the C API, please view the
.I readme.md
file which you can find online at:
.br
.B <https://github.com/howerj/pickle/blob/master/readme.md>
.br
This contains a much fuller description of the project.

Things to bear in mind about the language:

.br
* Everything in the language is a string.
.br
* All things are commands, like in sh(1), they take the form 'command arg1 arg2 ...'
.br
* There is very little syntax.

The syntax includes:

.nf
\&	string  called if first string, argument if not
\&	{ }     quote, used to prevent evaluation
\&	[ ]     command substitution
\&	" "     string
\&	$var    variable lookup
\&	\\c      escape a character
\&	#       comment
.fi

Some example commands/programs, one per line:

.nf
\&	puts "Hello, World!"
\&
\&	set a 2; puts $a; puts "a is: $a";
\&
\&	if {< $a 3} { puts "a < three" } else { puts "a >= three" }
\&
\&	set a -1; while {< $a 3} { set a [+ $a 1]; puts $a; }
\&
\&	proc square {x} { * $x $x }; puts "$a squared is [square $a]";
\&
\&	set line [gets]; puts "you typed $line";
.fi

.SH OPTIONS

.TP
.B -
Stop processing command line arguments

.TP
.B -h
Display a help message and exit.

.TP
.B -t
Run built in self tests and exit (return code 0 is success).

.TP
.B -a
Use custom block allocator, for testing purposes. The interpreter does not have
to use the standard library allocation functions malloc(3) and free(3), but
instead can use an externally provided allocator. This is to aid in porting the
system to a non-hosted environment, running on the bare metal.

.TP
.B -A
Enable debugging of the custom allocator, implies '-a'.

.TP
.B -s
Suppress prompt printing. By default a prompt is printed out, this can be
disabled.

.TP
.B file
A pickle script file to process, multiple files can be given and they will be
processed one after the other.

.SH EXAMPLES

.B
	./pickle file.tcl

This will run the pickle interpreter on a TCL script called
.I file.tcl
Output is written to stdout(3).


.B
	./pickle

This will run the pickle interpreter as a shell, input will be read in from
stdin(3) a line at a time and the command evaluated, the result will be printed
to stdout(3).

.SH C API

The C API is simple to use, it will not be described here as it has already
been described in full in the pickle repository. You can instantiate an
interpreter, with error checking, in a few dozen lines of code.

.nf
\&  #include "pickle.h"
\&  #include <stdio.h>
\&  #include <string.h>
\&  
\&  int main(void) {
\&  	pickle_t *p = NULL;
\&  	if (pickle_new(&p, NULL) < 0)
\&  		return -1;
\&  	const char *prompt = "> ";
\&  	fputs(prompt, stdout);
\&  	fflush(stdout);
\&  	for (char buf[80] = { 0 }; fgets(buf, sizeof buf, stdin); memset(buf, 0, sizeof buf)) {
\&  		const char *r = NULL;
\&  		const int er = pickle_eval(p, buf);
\&  		pickle_get_result_string(p, &r);
\&  		fprintf(stdout, "[%d]: %s\\n%s", er, r, prompt);
\&  		fflush(stdout);
\&  	}
\&  	return pickle_delete(p);
\&  }
.fi

Custom commands can be registered with the interpreter, expressions evaluated
and variables inspected. Consult the project documentation,
.B readme.md
, for more information.

.SH EXIT STATUS

This program returns zero on success and non zero on failure, although any
scripts executed may chose to return other values.

.SH SEE ALSO

For more information, see
.B <https://github.com/howerj/pickle>

.SH LIMITATIONS

For the sake of simplicity of the implementation the system has some
limitations. The defaults as of writing this document are:

.nf
\& * Recursion Depth - 128 (set at compile time)
\& * Maximum size of file - 2GiB
.fi

Some of these limitations should be removed in later releases.

.SH BUGS
For any bugs, contact the author.

.SH AUTHOR
Richard James Howe (howe.r.j.89@gmail.com)

.SH COPYRIGHT
BSD license, See
.B <https://github.com/howerj/pickle/blob/master/LICENSE>
or pickle.c for more information.

Copyright (c) 2018-2019, Richard James Howe <howe.r.j.89@gmail.com>
.br
Copyright (c) 2007-2016, Salvatore Sanfilippo <antirez at gmail dot com>

